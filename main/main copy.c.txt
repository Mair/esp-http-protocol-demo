#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_wifi.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_netif.h"
#include "esp_http_client.h"

#define TAG "COMMS"
xSemaphoreHandle connectionSemaphore;

static void event_handler(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)
{
  printf("event_base, event_id %d\n", event_id);
  if (event_id == IP_EVENT_STA_GOT_IP)
    xSemaphoreGive(connectionSemaphore);
}

void wifiInit()
{
  ESP_ERROR_CHECK(nvs_flash_init());
  ESP_ERROR_CHECK(esp_netif_init());
  ESP_ERROR_CHECK(esp_event_loop_create_default());
  esp_netif_create_default_wifi_sta();
  wifi_init_config_t wifi_init_config = WIFI_INIT_CONFIG_DEFAULT();
  ESP_ERROR_CHECK(esp_wifi_init(&wifi_init_config));
  ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, event_handler, NULL));
  ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, event_handler, NULL));
  ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
  wifi_config_t wifi_config =
      {
          .sta = {
              .ssid = CONFIG_WIFI_SSID,
              .password = CONFIG_WIFI_PASSWORD}};
  esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config);
  ESP_ERROR_CHECK(esp_wifi_start());
  ESP_ERROR_CHECK(esp_wifi_connect());
}

typedef struct payload_t
{
  char *body;
}payload_t;

esp_err_t clientEventHandler(esp_http_client_event_t *evt)
{
  payload_t *payload = evt->user_data;

  if (evt->event_id == HTTP_EVENT_ON_DATA)
  {
    payload->body = (char *)malloc(evt->data_len + 1);
    memset(payload->body, 0, evt->data_len + 1);
    memcpy(payload->body, evt->data, evt->data_len);
  }
  return ESP_OK;
}

void OnConnected(void *params)
{
  xSemaphoreTake(connectionSemaphore, portMAX_DELAY);

  payload_t payload;

  esp_http_client_config_t clientConfig = {
      .url = "http://worldtimeapi.org/api/timezone/Europe/London/",
      .event_handler = clientEventHandler,
      .user_data = &payload};

  esp_http_client_handle_t client = esp_http_client_init(&clientConfig);
  esp_err_t err = esp_http_client_perform(client);
  if (err == ESP_OK)
  {
    ESP_LOGI(TAG, "RESPONCE %s", payload.body);
    free(payload.body);
  }
  else
  {
    ESP_LOGE(TAG, "HTTP GET request failed: %s", esp_err_to_name(err));
  }
  esp_http_client_cleanup(client);

  while (true)
  {
    printf("done!\n");
    vTaskDelay(pdMS_TO_TICKS(5000));
  }
}

void app_main(void)
{
  connectionSemaphore = xSemaphoreCreateBinary();
  wifiInit();
  xTaskCreate(&OnConnected, "handel comms", 1024 * 3, NULL, 5, NULL);
}
